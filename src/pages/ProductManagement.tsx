import React, { useState } from "react";
import { DashboardLayout } from "@/components/layout/DashboardLayout";
import { DataTable } from "@/components/ui/data-table/data-table";
import { ColumnDef } from "@tanstack/react-table";
import { StatusBadge } from "@/components/ui/status-badge";
import {
	Eye,
	Check,
	X,
	MoreHorizontal,
	ArrowUpDown,
	ShoppingBasket,
	Flag,
	Tags,
} from "lucide-react";
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuLabel,
	DropdownMenuSeparator,
	DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import {
	Card,
	CardContent,
	CardDescription,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { ConfirmationModal } from "@/components/modals/ConfirmationModal";
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogFooter,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Product, ProductCategory, Category } from "@/types/products";
import { useProductsQuery, useProductCategoriesQuery } from "@/hooks/queries";
import {
	createProductCategory,
	updateProductCategory,
	deleteProductCategory,
} from "@/lib/products";
import { useToast } from "@/hooks/use-toast";

const ProductManagement = () => {
	const {
		data: products = [],
		isLoading: isLoadingProducts,
		error: errorProducts,
	} = useProductsQuery();
	const {
		data: productCategories = [],
		isLoading: isLoadingCategories,
		error: errorCategories,
	} = useProductCategoriesQuery();
	const [statusFilter, setStatusFilter] = useState<string>("all");
	const [categoryFilter, setCategoryFilter] = useState<string>("all");
	const { toast } = useToast();

	// Modal states
	const [modalState, setModalState] = useState<{
		isOpen: boolean;
		type: "approve" | "reject" | "flag";
		productId: string | null;
	}>({
		isOpen: false,
		type: "approve",
		productId: null,
	});

	const [categoryModal, setCategoryModal] = useState<{
		isOpen: boolean;
		type: "add" | "edit";
		category: Category | null;
	}>({
		isOpen: false,
		type: "add",
		category: null,
	});

	const [newCategoryName, setNewCategoryName] = useState("");
	const [newCategorySlug, setNewCategorySlug] = useState("");
	const [newCategoryParent, setNewCategoryParent] = useState<string | null>(
		null,
	);

	const [rejectReason, setRejectReason] = useState("");

	// Convert ProductCategory[] to Category[] for consistent type usage
	const categoryList: Category[] = productCategories.map((cat) => ({
		id: cat.id,
		name: cat.name,
		slug: cat.slug,
		parent_id: cat.parent_id,
		products_count: cat.products_count,
	}));

	// Filter products based on selected filters
	const filteredProducts = products.filter((product) => {
		const statusMatch =
			statusFilter === "all" || product.status === statusFilter;
		const categoryMatch =
			categoryFilter === "all" || product.category === categoryFilter;
		return statusMatch && categoryMatch;
	});

	const handleAction = (
		type: "approve" | "reject" | "flag",
		productId: string,
	) => {
		setModalState({ isOpen: true, type, productId });
		if (type === "reject") {
			setRejectReason("");
		}
	};

	const confirmAction = () => {
		if (!modalState.productId) return;

		// Handle action based on type
		if (modalState.type === "approve") {
			// Approve product logic
			toast({
				title: "Product Approved",
				description: "The product has been approved successfully.",
			});
		} else if (modalState.type === "reject") {
			// Reject product logic
			toast({
				title: "Product Rejected",
				description: `The product has been rejected. Reason: ${rejectReason}`,
				variant: "destructive",
			});
		} else if (modalState.type === "flag") {
			// Flag product logic
			toast({
				title: "Product Flagged",
				description: "The product has been flagged for review.",
				variant: "destructive",
			});
		}

		setModalState({ isOpen: false, type: "approve", productId: null });
	};

	const handleCategoryAction = (type: "add" | "edit", category?: Category) => {
		if (type === "edit" && category) {
			setNewCategoryName(category.name);
			setNewCategorySlug(category.slug);
			setNewCategoryParent(category.parent_id);
			setCategoryModal({ isOpen: true, type, category });
		} else {
			setNewCategoryName("");
			setNewCategorySlug("");
			setNewCategoryParent(null);
			setCategoryModal({ isOpen: true, type, category: null });
		}
	};

	const saveCategoryChanges = async () => {
		try {
			if (categoryModal.type === "add") {
				// Add new category
				const newCategory: ProductCategory = {
					id: `c${productCategories.length + 1}`, // In a real app, this would be generated by the backend
					name: newCategoryName,
					slug:
						newCategorySlug ||
						newCategoryName.toLowerCase().replace(/\s+/g, "-"),
					description: "",
					image_url: "",
					parent_id: newCategoryParent,
					products_count: 0,
				};

				// Call API to create category
				await createProductCategory(newCategory);
				toast({
					title: "Category Added",
					description: "The category has been added successfully.",
				});
			} else if (categoryModal.type === "edit" && categoryModal.category) {
				// Find the existing category
				const existingCategory = productCategories.find(
					(cat) => cat.id === categoryModal.category?.id,
				);

				if (existingCategory) {
					// Update existing category
					const updatedCategory: ProductCategory = {
						...existingCategory,
						name: newCategoryName,
						slug: newCategorySlug,
						parent_id: newCategoryParent,
					};

					// Call API to update category
					await updateProductCategory(updatedCategory);
					toast({
						title: "Category Updated",
						description: "The category has been updated successfully.",
					});
				}
			}
		} catch (error) {
			toast({
				title: "Error",
				description: "Failed to save category changes.",
				variant: "destructive",
			});
			console.error("Error saving category changes:", error);
		}

		setCategoryModal({ isOpen: false, type: "add", category: null });
	};

	const deleteCategory = async (categoryId: string) => {
		try {
			await deleteProductCategory(categoryId);
			toast({
				title: "Category Deleted",
				description: "The category has been deleted successfully.",
			});
		} catch (error) {
			toast({
				title: "Error",
				description: "Failed to delete category.",
				variant: "destructive",
			});
			console.error("Error deleting category:", error);
		}
	};

	const columns: ColumnDef<Product>[] = [
		{
			accessorKey: "name",
			header: ({ column }) => (
				<div
					className="flex cursor-pointer items-center"
					onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
				>
					Product Name
					<ArrowUpDown className="ml-2 h-4 w-4" />
				</div>
			),
			cell: ({ row }) => (
				<div className="flex items-center">
					<ShoppingBasket className="mr-2 h-4 w-4 text-muted-foreground" />
					<span className="font-medium">{row.original.name}</span>
				</div>
			),
		},
		{
			accessorKey: "seller",
			header: "Seller",
		},
		{
			accessorKey: "category",
			header: "Category",
			cell: ({ row }) => (
				<div className="flex items-center">
					<Tags className="mr-2 h-4 w-4 text-muted-foreground" />
					<span>{row.original.category}</span>
				</div>
			),
		},
		{
			accessorKey: "price",
			header: ({ column }) => (
				<div
					className="flex cursor-pointer items-center"
					onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
				>
					Price
					<ArrowUpDown className="ml-2 h-4 w-4" />
				</div>
			),
			cell: ({ row }) => <div>${row.original.price.toFixed(2)}</div>,
		},
		{
			accessorKey: "status",
			header: "Status",
			cell: ({ row }) => {
				const status = row.original.status;

				const statusMap = {
					pending: { label: "Pending", variant: "pending" as const },
					approved: { label: "Approved", variant: "success" as const },
					rejected: { label: "Rejected", variant: "error" as const },
					flagged: { label: "Flagged", variant: "warning" as const },
				};

				// Default to pending if status is undefined
				const { label, variant } =
					status && statusMap[status]
						? statusMap[status]
						: { label: "Unknown", variant: "pending" as const };

				return <StatusBadge variant={variant} label={label} />;
			},
		},
		{
			accessorKey: "stock",
			header: "Stock",
			cell: ({ row }) => {
				const stock = row.original.stock || 0;
				return (
					<div className={stock < 10 ? "text-yellow-600 font-medium" : ""}>
						{stock}
					</div>
				);
			},
		},
		{
			id: "actions",
			cell: ({ row }) => {
				const product = row.original;

				return (
					<div className="flex justify-end">
						<Button variant="ghost" size="icon" className="mr-1">
							<Eye className="h-4 w-4" />
						</Button>

						<DropdownMenu>
							<DropdownMenuTrigger asChild>
								<Button variant="ghost" size="icon">
									<MoreHorizontal className="h-4 w-4" />
								</Button>
							</DropdownMenuTrigger>
							<DropdownMenuContent align="end">
								<DropdownMenuLabel>Actions</DropdownMenuLabel>
								<DropdownMenuSeparator />
								{product.status === "pending" && (
									<>
										<DropdownMenuItem
											onClick={() => handleAction("approve", product.id)}
										>
											<Check className="mr-2 h-4 w-4" /> Approve
										</DropdownMenuItem>
										<DropdownMenuItem
											onClick={() => handleAction("reject", product.id)}
										>
											<X className="mr-2 h-4 w-4" /> Reject
										</DropdownMenuItem>
									</>
								)}
								{product.status !== "flagged" && (
									<DropdownMenuItem
										onClick={() => handleAction("flag", product.id)}
									>
										<Flag className="mr-2 h-4 w-4" /> Flag Product
									</DropdownMenuItem>
								)}
							</DropdownMenuContent>
						</DropdownMenu>
					</div>
				);
			},
		},
	];

	return (
		<DashboardLayout>
			<div className="space-y-6">
				<div>
					<h1 className="text-3xl font-bold tracking-tight">
						Product Management
					</h1>
					<p className="text-muted-foreground">
						Manage, approve, and categorize products
					</p>
				</div>

				<Tabs defaultValue="products">
					<TabsList>
						<TabsTrigger value="products">Products</TabsTrigger>
						<TabsTrigger value="categories">Categories</TabsTrigger>
						<TabsTrigger value="flagged">
							Flagged Items (
							{products.filter((p) => p.status === "flagged").length})
						</TabsTrigger>
					</TabsList>

					<TabsContent value="products" className="space-y-6 pt-4">
						<Card>
							<CardHeader>
								<div className="flex flex-col space-y-2 sm:flex-row sm:items-center sm:justify-between sm:space-y-0">
									<div>
										<CardTitle>Products</CardTitle>
										<CardDescription>
											{filteredProducts.length} products found
										</CardDescription>
									</div>
									<div className="flex flex-col space-y-2 sm:flex-row sm:space-x-2 sm:space-y-0">
										<Select
											value={statusFilter}
											onValueChange={(value) => setStatusFilter(value)}
										>
											<SelectTrigger className="w-[180px]">
												<SelectValue placeholder="Filter by status" />
											</SelectTrigger>
											<SelectContent>
												<SelectItem value="all">All Statuses</SelectItem>
												<SelectItem value="pending">Pending</SelectItem>
												<SelectItem value="approved">Approved</SelectItem>
												<SelectItem value="rejected">Rejected</SelectItem>
												<SelectItem value="flagged">Flagged</SelectItem>
											</SelectContent>
										</Select>

										<Select
											value={categoryFilter}
											onValueChange={(value) => setCategoryFilter(value)}
										>
											<SelectTrigger className="w-[180px]">
												<SelectValue placeholder="Filter by category" />
											</SelectTrigger>
											<SelectContent>
												<SelectItem value="all">All Categories</SelectItem>
												{categoryList
													.filter((cat) => cat.parent_id === null)
													.map((cat) => (
														<SelectItem key={cat.id} value={cat.name}>
															{cat.name}
														</SelectItem>
													))}
											</SelectContent>
										</Select>
									</div>
								</div>
							</CardHeader>
							<CardContent>
								<DataTable
									columns={columns}
									data={filteredProducts}
									searchKey="name"
									searchPlaceholder="Search products..."
								/>
							</CardContent>
						</Card>
					</TabsContent>

					<TabsContent value="categories" className="space-y-6 pt-4">
						<Card>
							<CardHeader>
								<div className="flex items-center justify-between">
									<div>
										<CardTitle>Product Categories</CardTitle>
										<CardDescription>
											Manage your product categories and hierarchy
										</CardDescription>
									</div>
									<Button onClick={() => handleCategoryAction("add")}>
										Add Category
									</Button>
								</div>
							</CardHeader>
							<CardContent>
								<div className="rounded-md border">
									<table className="w-full text-sm">
										<thead>
											<tr className="border-b bg-muted/50 text-left">
												<th className="py-3 px-4 font-medium">Name</th>
												<th className="py-3 px-4 font-medium">Slug</th>
												<th className="py-3 px-4 font-medium">Parent</th>
												<th className="py-3 px-4 font-medium">Products</th>
												<th className="py-3 px-4 font-medium text-right">
													Actions
												</th>
											</tr>
										</thead>
										<tbody>
											{categoryList.map((category) => (
												<tr key={category.id} className="border-b">
													<td className="py-3 px-4">
														<div className="font-medium">{category.name}</div>
													</td>
													<td className="py-3 px-4 text-muted-foreground">
														{category.slug}
													</td>
													<td className="py-3 px-4">
														{category.parent_id
															? categoryList.find(
																	(c) => c.id === category.parent_id,
															  )?.name
															: "—"}
													</td>
													<td className="py-3 px-4">
														{category.products_count}
													</td>
													<td className="py-3 px-4 text-right">
														<div className="flex justify-end">
															<Button
																variant="ghost"
																size="sm"
																onClick={() =>
																	handleCategoryAction("edit", category)
																}
															>
																Edit
															</Button>
															<Button
																variant="ghost"
																size="sm"
																onClick={() => deleteCategory(category.id)}
																className="text-destructive hover:text-destructive"
															>
																Delete
															</Button>
														</div>
													</td>
												</tr>
											))}
										</tbody>
									</table>
								</div>
							</CardContent>
						</Card>
					</TabsContent>

					<TabsContent value="flagged" className="space-y-6 pt-4">
						<Card>
							<CardHeader>
								<CardTitle>Flagged Products</CardTitle>
								<CardDescription>
									Products that have been flagged for review
								</CardDescription>
							</CardHeader>
							<CardContent>
								{products.filter((p) => p.status === "flagged").length > 0 ? (
									<div className="rounded-md border">
										<table className="w-full text-sm">
											<thead>
												<tr className="border-b bg-muted/50 text-left">
													<th className="py-3 px-4 font-medium">Product</th>
													<th className="py-3 px-4 font-medium">Seller</th>
													<th className="py-3 px-4 font-medium">Price</th>
													<th className="py-3 px-4 font-medium">Flagged On</th>
													<th className="py-3 px-4 font-medium">Reason</th>
													<th className="py-3 px-4 font-medium text-right">
														Actions
													</th>
												</tr>
											</thead>
											<tbody>
												{products
													.filter((p) => p.status === "flagged")
													.map((product) => (
														<tr key={product.id} className="border-b">
															<td className="py-3 px-4">
																<div className="font-medium">
																	{product.name}
																</div>
															</td>
															<td className="py-3 px-4">{product.seller}</td>
															<td className="py-3 px-4">
																${product.price.toFixed(2)}
															</td>
															<td className="py-3 px-4">
																{product.created_at &&
																	new Date(
																		product.created_at,
																	).toLocaleDateString()}
															</td>
															<td className="py-3 px-4">
																Potential counterfeit product
															</td>
															<td className="py-3 px-4 text-right">
																<Button
																	variant="outline"
																	size="sm"
																	className="mr-2"
																	onClick={() =>
																		handleAction("approve", product.id)
																	}
																>
																	Approve
																</Button>
																<Button
																	variant="destructive"
																	size="sm"
																	onClick={() =>
																		handleAction("flag", product.id)
																	}
																>
																	Remove
																</Button>
															</td>
														</tr>
													))}
											</tbody>
										</table>
									</div>
								) : (
									<div className="flex h-40 items-center justify-center rounded-md border">
										<p className="text-muted-foreground">
											No flagged products found
										</p>
									</div>
								)}
							</CardContent>
						</Card>
					</TabsContent>
				</Tabs>
			</div>

			{/* Confirmation Modals */}
			<ConfirmationModal
				isOpen={modalState.isOpen && modalState.type === "approve"}
				onClose={() => setModalState({ ...modalState, isOpen: false })}
				onConfirm={confirmAction}
				title="Approve Product"
				description="Are you sure you want to approve this product? It will be visible on the marketplace."
				confirmLabel="Approve"
				variant="default"
			/>

			<Dialog
				open={modalState.isOpen && modalState.type === "reject"}
				onOpenChange={(open) => {
					if (!open) setModalState({ ...modalState, isOpen: false });
				}}
			>
				<DialogContent>
					<DialogHeader>
						<DialogTitle>Reject Product</DialogTitle>
						<DialogDescription>
							Please provide a reason for rejecting this product.
						</DialogDescription>
					</DialogHeader>
					<div className="py-4">
						<Textarea
							placeholder="Reason for rejection"
							value={rejectReason}
							onChange={(e) => setRejectReason(e.target.value)}
							rows={4}
						/>
					</div>
					<DialogFooter>
						<Button
							variant="outline"
							onClick={() => setModalState({ ...modalState, isOpen: false })}
						>
							Cancel
						</Button>
						<Button variant="destructive" onClick={confirmAction}>
							Reject Product
						</Button>
					</DialogFooter>
				</DialogContent>
			</Dialog>

			<ConfirmationModal
				isOpen={modalState.isOpen && modalState.type === "flag"}
				onClose={() => setModalState({ ...modalState, isOpen: false })}
				onConfirm={confirmAction}
				title="Flag Product"
				description="Are you sure you want to flag this product for review? It will be hidden from the marketplace until reviewed."
				confirmLabel="Flag Product"
				variant="destructive"
			/>

			{/* Category Modal */}
			<Dialog
				open={categoryModal.isOpen}
				onOpenChange={(open) => {
					if (!open) setCategoryModal({ ...categoryModal, isOpen: false });
				}}
			>
				<DialogContent>
					<DialogHeader>
						<DialogTitle>
							{categoryModal.type === "add" ? "Add Category" : "Edit Category"}
						</DialogTitle>
					</DialogHeader>
					<div className="space-y-4 py-4">
						<div className="space-y-2">
							<label htmlFor="name" className="text-sm font-medium">
								Category Name
							</label>
							<Input
								id="name"
								value={newCategoryName}
								onChange={(e) => setNewCategoryName(e.target.value)}
								placeholder="e.g. Electronics"
							/>
						</div>
						<div className="space-y-2">
							<label htmlFor="slug" className="text-sm font-medium">
								Slug
							</label>
							<Input
								id="slug"
								value={newCategorySlug}
								onChange={(e) => setNewCategorySlug(e.target.value)}
								placeholder="e.g. electronics"
							/>
							<p className="text-xs text-muted-foreground">
								Used in URLs, automatically generated if left empty
							</p>
						</div>
						<div className="space-y-2">
							<label htmlFor="parent" className="text-sm font-medium">
								Parent Category
							</label>
							<Select
								value={newCategoryParent || ""}
								onValueChange={(value) =>
									setNewCategoryParent(value === "" ? null : value)
								}
							>
								<SelectTrigger>
									<SelectValue placeholder="No parent (top level)" />
								</SelectTrigger>
								<SelectContent>
									<SelectItem value="">No parent (top level)</SelectItem>
									{categoryList
										.filter((cat) => cat.parent_id === null)
										.map((cat) => (
											<SelectItem key={cat.id} value={cat.id}>
												{cat.name}
											</SelectItem>
										))}
								</SelectContent>
							</Select>
						</div>
					</div>
					<DialogFooter>
						<Button
							variant="outline"
							onClick={() =>
								setCategoryModal({ ...categoryModal, isOpen: false })
							}
						>
							Cancel
						</Button>
						<Button onClick={saveCategoryChanges}>
							{categoryModal.type === "add" ? "Add Category" : "Save Changes"}
						</Button>
					</DialogFooter>
				</DialogContent>
			</Dialog>
		</DashboardLayout>
	);
};

export default ProductManagement;
